The smart way to initialize objects in a class in not doing something like

class Player
{
    private:
        string name;
        int age;
        int health;
        int xp;

    public:
        //Overload Contructors
        Player();
};

//Overload Contructors
Player::Player()
    :name{"None"}, age{0}, health{0}, xp{0}{
    Display();
}

Why shoudl we use the cunstruction initialization list.

Using an initializer list in C++ constructors is crucial for several reasons, encompassing performance, correctness, and
code style:

Performance:
Initializer lists directly initialize member variables. This avoids a two-step process where members are first
default-constructed and then assigned values within the constructor body. For complex objects, this direct initialization
can significantly improve performance by eliminating unnecessary temporary object creation and assignment operations.

Handling const and Reference Members:
const member variables and reference members must be initialized in an initializer list. They cannot be assigned values
after construction because their values or the entities they refer to cannot be changed after their initial setup.

Base Class Initialization:
Initializer lists are the mechanism to explicitly call specific constructors of base classes. This ensures that inherited
members are correctly initialized according to the desired base class constructor.

Order of Initialization:
Initializer lists guarantee a predictable order of initialization for member variables, which is the order of declaration
within the class. This helps prevent subtle bugs that can arise from dependencies between member variables during initialization.

Cleaner Code:
By handling member initialization in the initializer list, the constructor body can remain focused on more complex logic
or operations that cannot be handled during direct initialization, leading to more readable and maintainable code.

Choosing Constructors for Member Objects:
When a class contains objects of other classes as members, the initializer list allows you to explicitly call a specific
constructor of that member object, passing necessary arguments, rather than relying on its default constructor.





